
@page "/index/{storeId:int}"
@inject HttpClient Http

<PageTitle>Store</PageTitle>

<h1>Store of @_response?.Data?.Keeper?.Name</h1>

<p>This component demonstrates fetching data from the server.</p>

<MessageModal IsOpen="@IsModalOpen" Title="@ModalTittle" Content="@ModalContent" IsOpenChanged="HandleModalStateChange" />

@if (_response?.Data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Quantity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _response.Data.Products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button @onclick="() =>DecrementQuantity(product)">-</button>
                        <button @onclick="() =>IncrementQuantity(product)">+</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="() =>SaveChangesAsync()">Save</button>

    
 }

@code {

    [Parameter]
    public int StoreId { get; set; }
    private BaseResponse<Store>? _response;
    private List<Product> _editedProducts;

    private bool IsModalOpen { get; set; }

    private string ModalTittle { get; set; } = "";
    private string ModalContent { get; set; } = "";

    public Index()
    {
        _editedProducts = new List<Product>();
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://localhost:7148/stores/{StoreId}")
            };

        using (var response = await Http.SendAsync(request))
        {
            var body = await response.Content.ReadAsStringAsync();
            _response = JsonConvert.DeserializeObject<BaseResponse<Store>>(body);
        }

        if (_response == null)
        {
            OpenModal(new BaseResponse<Store>
                {
                    StatusCode = StatusCode.InternalServerError,
                    Message = "Сервер отправил пустой ответ."
                },
                StatusCode.InternalServerError.ToString()
            );
            return;
        }

        if (_response.StatusCode == StatusCode.OK)
            return;

        OpenModal(_response, _response.StatusCode.ToString());

    }

    private void IncrementQuantity(Product product)
    {
        product.Quantity++;
        int index = _editedProducts.IndexOf(product);
        if (index != -1)
        {
            _editedProducts[index] = product;
        }
        else
        {
            _editedProducts.Add(product);
        }

    }
    private void DecrementQuantity(Product product)
    {
        product.Quantity--;
        int index = _editedProducts.IndexOf(product);
        if (index != -1)
        {
            _editedProducts[index] = product;
        }
        else
        {
            _editedProducts.Add(product);
        }
    }

    private void OpenModal<T>(IBaseResponse<T> baseResponse, string tittle)
    {
        ModalContent = baseResponse.StatusCode == 0 ? "" : baseResponse.StatusCode.ToString();
        ModalContent += "\t" + baseResponse.Message + "\t";
        ModalContent += baseResponse.Data == null ? "" : baseResponse.Data.ToString();
        IsModalOpen = true;
    }

    private void HandleModalStateChange(bool isOpen)
    {
        IsModalOpen = isOpen;
    }

    private async Task SaveChangesAsync()
    {
        var json = JsonConvert.SerializeObject(_editedProducts);
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PatchAsync("https://localhost:7148/products/", content);

        if (_response == null)
        {
            OpenModal(new BaseResponse<Store>
                {
                    StatusCode = StatusCode.InternalServerError,
                    Message = "Сервер отправил пустой ответ."
                },
                StatusCode.InternalServerError.ToString()
            );
            return;
        }

        if (_response.StatusCode == StatusCode.OK)
        { 
            OpenModal(new BaseResponse<bool>
            {
                Message = "Успешно сохранено!"
            }, "Успешно!");
            return;
        }

        OpenModal(_response, _response.StatusCode.ToString());

    }
        
    



}
